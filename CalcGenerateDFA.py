# -*- coding: utf-8 -*-
"""
Created on Tue Nov  2 2020

@author: lianz
"""
# clear all
# from scipy.misc import derivative
# from UC_package import UC_reliability_zzz
import AFOSM_UC_package as AFOSM
import MonteCarlo_UC_package as MonteCarlo
import matplotlib.pyplot as plt
import numpy as np
# from numpy import sqrt, pi
from scipy.stats import norm
    
if __name__ == "__main__":
#----define the parameters----------
    unit_length = 300                       #the length of the model    /mm
    dia_ten_arm_io = 3.15                   #diameter of the tensile armors, both inside and outside are of the same value
    dia_in_sh = 113.0-dia_ten_arm_io*2      #diameter of inside shealth
    thk_in_sh = 4                           #thickness of inside shealth    /mm
    dia_out_sh = 128.2                      #diameter of outside shealth
    thk_out_sh = 4                          #thickness of outside shealth
    dia_cen_tube = 29.14                    #diameter of central tubes
    thk_cen_tube = 1.87                     #thickness of central tubes
    dia_ext_tube = 15.52                    #diameter of external tubes
    thk_ext_tube = 1.41                     #thickness of external tubes
    dia_other_cylinders = 24.6              #diameter of other cylinders, e.g. optial fibers
    num_ten_arm_in = 102                    #number of inside tensile armors
    num_ten_arm_out = 110                   #number of outside tensile armors
    num_cen_tube = 4                        #number of central tubes
    num_ext_tube = 5                        #number of external tubes
    num_other_cylinders = 4                 #number of other tubes
    helix_ang_ten_arm_in = 36               #helix angle tensile armors inside / degree
    helix_ang_ten_arm_out = 30              #helix angle tensile armors outside / degree
    relibility_cts_real = 0                 #calculated relibility of central tubes  to be updated after calculation
    relibility_cts_required = 0.999         #requirement
    #currently not used in DFA
    relibility_ets_real = 0.999             #calculated relibility of external tubes
    relibility_ets_required = 0.99          #requirement
    relibility_tas_in_real = 0.999          #calculated relibility of tensile_armors_in
    relibility_tas_in_required = 0.99       #requirement
    relibility_tas_out_real = 0.999         #calculated relibility of tensile_armors_out
    relibility_tas_out_required = 0.99      #requirement
 #----define the parameters------------
    
    instance=AFOSM.AFOSM_UC_zzz()    
    instance.mu_xi = [dia_cen_tube,thk_cen_tube,dia_ext_tube,thk_ext_tube,550]
    instance.sigma_xi = [0.043,0.062,0.043,0.047,22.6]
    instance.p = 34.5              #MPa
    instance.T = 178.8e3           #N
    instance.Curvanture = 0.11e-3  #mm^-1
    instance.Et = 2.06e5           #Mpa <- 2.06e11 Pa
    instance.gama = 1.0            #utilization
    instance.n_in, instance.n_out = num_ten_arm_in,num_ten_arm_out
    instance.R_io = dia_ten_arm_io/2
    instance.alpha_helix_in, instance.alpha_helix_out = helix_ang_ten_arm_in/180*3.14, helix_ang_ten_arm_out/180*3.14

#AFOSM
    print("AFOSM")
    print(instance.mu_xi)
    beta_cur_ins,xi_star_ins = AFOSM.main(instance)
    print(beta_cur_ins)
    print(norm.cdf(beta_cur_ins))
    print(xi_star_ins)

#Monte Carlo
    print("\nMonte Carlo")
    print(instance.mu_xi)
    z_ins, sigma_equ_ins, reliability_ins = MonteCarlo.main(instance)

    print(norm.ppf(reliability_ins))
    print(reliability_ins)

    (mu, sigma) = norm.fit(sigma_equ_ins)
    counts, bins, ignored = plt.hist(sigma_equ_ins, 'auto', density=True)
    plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) *
                    np.exp( - (bins - mu)**2 / (2 * sigma**2) ),
              linewidth=2, color='r')
    #plt.show()
    relibility_cts_real = (norm.cdf(beta_cur_ins)+ reliability_ins)/2
    
    #Generate DFA file
    DFA_content=''
    DFA_content += """#! NX/KF 4.0
DefClass: Umbilical_AutoGenerated (%ug_create_instance ug_base_part);
# Set of default parameters for the part\n"""

    DFA_content += '(number parameter) unit_length: ' + str(unit_length)+ ';\n'
    DFA_content += '(number parameter) dia_in_sh: ' + str(dia_in_sh)+ ';\n'
    DFA_content += '(number parameter) thk_in_sh: ' + str(thk_in_sh)+ ';\n'
    DFA_content += '(number parameter) dia_out_sh: ' + str(dia_out_sh)+ ';\n'
    DFA_content += '(number parameter) thk_out_sh: ' + str(thk_out_sh)+ ';\n'
    DFA_content += '(number parameter) dia_cen_tube: ' + str(dia_cen_tube)+ ';\n'
    DFA_content += '(number parameter) thk_cen_tube: ' + str(thk_cen_tube)+ ';\n'
    DFA_content += '(number parameter) dia_ext_tube: ' + str(dia_ext_tube)+ ';\n'
    DFA_content += '(number parameter) thk_ext_tube: ' + str(thk_ext_tube)+ ';\n'
    DFA_content += '(number parameter) dia_other_cylinders: ' + str(dia_other_cylinders)+ ';\n'
    DFA_content += '(number parameter) dia_ten_arm_io: ' + str(dia_ten_arm_io)+ ';\n'
    DFA_content += '(integer parameter) num_ten_arm_in: ' + str(num_ten_arm_in)+ ';\n'
    DFA_content += '(integer parameter) num_ten_arm_out: ' + str(num_ten_arm_out)+ ';\n'
    DFA_content += '(integer parameter) num_cen_tube: ' + str(num_cen_tube)+ ';\n'
    DFA_content += '(integer parameter) num_ext_tube: ' + str(num_ext_tube)+ ';\n'
    DFA_content += '(integer parameter) num_other_cylinders: ' + str(num_other_cylinders)+ ';\n'
    DFA_content += '(number parameter) helix_ang_ten_arm_in: ' + str(helix_ang_ten_arm_in)+ ';\n'
    DFA_content += '(number parameter) helix_ang_ten_arm_out: ' + str(helix_ang_ten_arm_out)+ ';\n'
    DFA_content += '#parameter relibility of central_tubes, external tubes, tensile armors in/out\n'
    DFA_content += '(number parameter) relibility_cts_real: ' + str(relibility_cts_real)+ ';\n'           #central tubes
    DFA_content += '(number parameter) relibility_cts_required: ' + str(relibility_cts_required)+ ';\n'
    DFA_content += '(number parameter) relibility_ets_real: ' + str(relibility_ets_real)+ ';\n'          #external tubes
    DFA_content += '(number parameter) relibility_ets_required: ' + str(relibility_ets_required)+ ';\n'
    DFA_content += '(number parameter) relibility_tas_in_real: ' + str(relibility_tas_in_real)+ ';\n'       #tensile_armors_in
    DFA_content += '(number parameter) relibility_tas_in_required: ' + str(relibility_tas_in_required)+ ';\n'
    DFA_content += '(number parameter) relibility_tas_out_real: ' + str(relibility_tas_out_real)+ ';\n'      #tensile_armors_out
    DFA_content += '(number parameter) relibility_tas_out_required: ' + str(relibility_tas_out_required)+ ';\n'

    DFA_content += """
# Basic building elements to form a structure
(child) in_shealth: 
    {
    class, ug_cylinder;
    diameter, dia_in_sh:;
    height, unit_length:;
    Origin, Point(0,0,0);
    Direction, Vector(0,0,1);
    };
#(Child) body_colored_in_shealth:
#    {
#    Class, ug_body; 
#    Feature, {in_shealth:};
#    color, ug_askClosestColor(YELLOW);
#    };
    
(child) hole_is: 
    {
    class, ug_cylinder;
    diameter, dia_in_sh:- 2*thk_in_sh:;
    height, unit_length:;
    Origin, Point(0,0,0);
    Direction, Vector(0,0,1);
    Operation, Subtract;
    Target, {in_shealth:};
    };
    
(child) out_shealth: 
    {
    class, ug_cylinder;
    diameter, dia_out_sh:;
    height, unit_length:;
    Origin, Point(0,0,0);
    Direction, Vector(0,0,1);
    };    
# (Child) body_colored_out_shealth:
#    {
#    Class, ug_body; 
#    Feature, {out_shealth:};
#    color, ug_askClosestColor(YELLOW);
#    };
    
(child) hole_os: 
    {
    class, ug_cylinder;
    diameter, dia_out_sh:- 2*thk_out_sh:;
    height, unit_length:;
    Origin, Point(0,0,0);
    Direction, Vector(0,0,1);
    Operation, Subtract;
    Target, {out_shealth:};
    }; 

(child list) central_tubes: 
    {
    Class, ug_cylinder;
    Origin, nth(child:index:, centerlst_cen_tubes:);
    Diameter, dia_cen_tube:;
    Direction, Vector(0,0,1);
    Height, unit_length:;
    quantity, num_cen_tube:;
    };      
(child list) holes_ct: 
    {
    class, ug_cylinder;
    diameter, dia_cen_tube:- 2*thk_cen_tube:;
    height, unit_length:;
    Origin, nth(child:index:, centerlst_cen_tubes:);
    Direction, Vector(0,0,1);
    Operation, Subtract;
    Target, {nth(child:index:, central_tubes:)};
    quantity, num_cen_tube:;
    };
(list) centerlst_cen_tubes: loop    #for use in (child list) central_tubes: 
{
  for $x in {-dia_cen_tube:/2, dia_cen_tube:/2}; # Coodinates for X hardcoded
  append loop {
    for $y in {-dia_cen_tube:/2, dia_cen_tube:/2}; # Coordinates for Y hardcoded
    for $pt is Point($x,$y,0);
    do printValue($pt);
    append {$pt};
  };
};

(child list) external_tubes: 
    {
    Class, ug_cylinder;
    Origin, nth(child:index:, centerlst_ext_tubes:);
    Diameter, dia_ext_tube:;
    Direction, Vector(0,0,1);
    Height, unit_length:;
    quantity, num_ext_tube:;
    };      
(child list) holes_et: 
    {
    class, ug_cylinder;
    diameter, dia_ext_tube:- 2*thk_ext_tube:;
    height, unit_length:;
    Origin, nth(child:index:, centerlst_ext_tubes:);
    Direction, Vector(0,0,1);
    Operation, Subtract;
    Target, {nth(child:index:, external_tubes:)};
    quantity, num_ext_tube:;
    };

(list) centerlst_ext_tubes:     #for use in (child list) external_tubes: 
{
    Point(20.04,36.22,0),
    Point(-20.04,36.22,0),
    Point(-20.04,-36.22,0),
    Point(20.04,-36.22,0),
    Point(36.22,-20.04,0)
};

(child list) other_cylinders: 
    {
    Class, ug_cylinder;
    Origin, nth(child:index:, centerlst_other_cylinders:);
    Diameter, dia_other_cylinders:;
    Direction, Vector(0,0,1);
    Height, unit_length:;
    quantity, num_other_cylinders:;
    };      

(list) centerlst_other_cylinders:     #for use in (child list) other_cylinders: 
{
    Point(0,dia_cen_tube:/2+sqrt(dia_other_cylinders:*dia_other_cylinders:/4+dia_cen_tube:*dia_other_cylinders:/2),0),
    Point(-dia_cen_tube:/2-sqrt(dia_other_cylinders:*dia_other_cylinders:/4+dia_cen_tube:*dia_other_cylinders:/2),0,0),
    Point(0,-dia_cen_tube:/2-sqrt(dia_other_cylinders:*dia_other_cylinders:/4+dia_cen_tube:*dia_other_cylinders:/2),0),
    Point(dia_cen_tube:/2+sqrt(dia_other_cylinders:*dia_other_cylinders:/4+dia_cen_tube:*dia_other_cylinders:/2),0,0),
};

#-----not consider helix------------
(child list) tensile_armors_in:
    {
    Class, ug_cylinder;
    Origin, Point((dia_in_sh:+dia_ten_arm_io:)/2*cos(360/num_ten_arm_in: * child:index:),(dia_in_sh:+dia_ten_arm_io:)/2*sin(360/num_ten_arm_in: * child:index:),0);
    Diameter, dia_ten_arm_io:;
    Direction, Vector(0,0,1);
    Height, unit_length:;
    quantity, num_ten_arm_in:;
    };
    
(child list) tensile_armors_out:
    {
    Class, ug_cylinder;
    Origin, Point((dia_out_sh:/2-thk_out_sh:-dia_ten_arm_io:/2)*cos(360/num_ten_arm_out: * child:index:),(dia_out_sh:/2-thk_out_sh:-dia_ten_arm_io:/2)*sin(360/num_ten_arm_out: * child:index:),0);
    #Origin, Point(((dia_in_sh:+dia_ten_arm_io:)/2+dia_ten_arm_io:)*cos(360/num_ten_arm_out: * child:index:),((dia_in_sh:+dia_ten_arm_io:)/2+dia_ten_arm_io:)*sin(360/num_ten_arm_out: * child:index:),0);
    Diameter, dia_ten_arm_io:;
    Direction, Vector(0,0,1);
    Height, unit_length:;
    quantity, num_ten_arm_out:;
    };
#-----not consider helix END---------

#-----consider helix------------
#(child list) tensile_armors_in:
#    {
#    Class, helix_curve_zzz;
#    start_point, Point((dia_in_sh:+dia_ten_arm_io:)/2*cos(360/num_ten_arm_in: * child:index:),(dia_in_sh:+dia_ten_arm_io:)/2*sin(360/num_ten_arm_in: * child:index:),0);
#    radius_o, dia_ten_arm_io:/2;
#    pitch, ((dia_in_sh:+dia_ten_arm_io:))*2*3.14/tan(helix_ang_ten_arm_in:);
#    turn, unit_length:/(((dia_in_sh:+dia_ten_arm_io:))*2*3.14/tan(helix_ang_ten_arm_in:));
#    clockwise, 1;
#    quantity, num_ten_arm_in:;
#    };
#
#(child list) tensile_armors_out:
#    {
#    Class, helix_curve_zzz;
#    start_point, Point(((dia_in_sh:+dia_ten_arm_io:)/2+dia_ten_arm_io:)*cos(360/num_ten_arm_out: * child:index:),((dia_in_sh:+dia_ten_arm_io:)/2+dia_ten_arm_io:)*sin(360/num_ten_arm_out: * child:index:),0);
#    radius_o, dia_ten_arm_io:/2;
#    pitch, ((dia_in_sh:+dia_ten_arm_io:)/2+dia_ten_arm_io:)*2*3.14/tan(helix_ang_ten_arm_out:);
#    turn, unit_length:/(((dia_in_sh:+dia_ten_arm_io:)/2+dia_ten_arm_io:)*2*3.14/tan(helix_ang_ten_arm_out:));
#    clockwise, -1;
#    quantity, num_ten_arm_out:;
#    };
#-----consider helix END------------
#filler
(Child) filler_0: 
{ 
    Class, ug_cylinder; 
    Diameter, 12;
    Direction, Vector(0,0,1);
    Height, unit_length:;
};
(Child) spline1:
{
  Class, ug_spline_cntl;
  Points, {{point(32,13,0)},{point(48,12,0)},{point(42,26,0)},{point(32,39,0)},{point(25,28,0)}}
};
(Child) line1:
{
 Class, ug_line; 
 Start_Point, Point(32,13,0); 
 End_Point, point(25,28,0); 
};
(Child) filler_extrude1: 
{ 
  Class, ug_extruded; 
  Start_Limit, 0; 
  End_Limit, unit_length:; 
  Direction, Vector(0,0,1); 
  profile, {spline1:,line1:};
};
(Child) spline2:
{
  Class, ug_spline_cntl;
  Points, {{point(-32,13,0)},{point(-48,12,0)},{point(-42,26,0)},{point(-32,39,0)},{point(-25,28,0)}}
};
(Child) line2:
{
 Class, ug_line; 
 Start_Point, Point(-32,13,0); 
 End_Point, point(-25,28,0); 
};
(Child) filler_extrude2: 
{ 
  Class, ug_extruded; 
  Start_Limit, 0; 
  End_Limit, unit_length:; 
  Direction, Vector(0,0,1); 
  profile, {spline2:,line2:};
};
(Child) spline3:
{
  Class, ug_spline_cntl;
  Points, {{point(-32,-13,0)},{point(-48,-12,0)},{point(-42,-26,0)},{point(-32,-39,0)},{point(-25,-28,0)}}
};
(Child) line3:
{
 Class, ug_line; 
 Start_Point, Point(-32,-13,0); 
 End_Point, point(-25,-28,0); 
};
(Child) filler_extrude3: 
{ 
  Class, ug_extruded; 
  Start_Limit, 0; 
  End_Limit, unit_length:; 
  Direction, Vector(0,0,1); 
  profile, {spline3:,line3:};
};
(Child) spline4:
{
  Class, ug_spline_cntl;
  Points, {{point(27,-24,0)},{point(43,-35,0)},{point(32,-39,0)},{point(24,-27,0)}}
};
(Child) line4:
{
 Class, ug_line; 
 Start_Point, Point(27,-24,0); 
 End_Point, point(24,-27,0); 
};
(Child) filler_extrude4: 
{ 
  Class, ug_extruded; 
  Start_Limit, 0; 
  End_Limit, unit_length:; 
  Direction, Vector(0,0,1); 
  profile, {spline4:,line4:};
};
  
#color depending on reliability  
 (Child list) body_colored_central_tubes:
    {
    Class, ug_body; 
    Feature, {nth(child:index:, central_tubes:)};
    quantity, num_cen_tube:;
    color,  if (relibility_cts_real: < relibility_cts_required:) then ug_askClosestColor(RED) 
            else if(relibility_cts_real: > relibility_cts_required:) then ug_askClosestColor(GREEN)
            else ug_askClosestColor(YELLOW); 
    };
    
(Child list) body_colored_external_tubes:
    {
    Class, ug_body; 
    Feature, {nth(child:index:, external_tubes:)};
    quantity, num_ext_tube:;
   color,  if (relibility_ets_real: < relibility_ets_required:) then ug_askClosestColor(RED) 
           else if(relibility_ets_real: > relibility_ets_required:) then ug_askClosestColor(GREEN)
           else ug_askClosestColor(YELLOW); 
    };
   
(Child list) body_colored_tensile_armors_in:
    {
    Class, ug_body; 
    Feature, {nth(child:index:, tensile_armors_in:)};
    quantity, num_ten_arm_in:;
   color,  if (relibility_tas_in_real: < relibility_tas_in_required:) then ug_askClosestColor(RED) 
           else if(relibility_tas_in_real: > relibility_tas_in_required:) then ug_askClosestColor(GREEN)
           else ug_askClosestColor(YELLOW); 
    };
   
(Child list) body_colored_tensile_armors_out:
    {
    Class, ug_body; 
    Feature, {nth(child:index:, tensile_armors_out:)};
    quantity, num_ten_arm_out:;
   color,  if (relibility_tas_out_real: < relibility_tas_out_required:) then ug_askClosestColor(RED) 
           else if(relibility_tas_out_real: > relibility_tas_out_required:) then ug_askClosestColor(GREEN)
           else ug_askClosestColor(YELLOW); 
    };
"""
    fw = open('Umbilical_AutoGenerated.dfa','w')    
    fw.write(DFA_content)
    fw.close()
