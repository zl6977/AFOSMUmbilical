#! NX/KF 4.0
DefClass: Umbilical_AutoGenerated (%ug_create_instance ug_base_part);
# Set of default parameters for the part
(number parameter) unit_length: 300;
(number parameter) dia_in_sh: 106.7;
(number parameter) thk_in_sh: 4;
(number parameter) dia_out_sh: 128.2;
(number parameter) thk_out_sh: 4;
(number parameter) dia_cen_tube: 29.14;
(number parameter) thk_cen_tube: 1.87;
(number parameter) dia_ext_tube: 15.52;
(number parameter) thk_ext_tube: 1.41;
(number parameter) dia_other_cylinders: 24.6;
(number parameter) dia_ten_arm_io: 3.15;
(integer parameter) num_ten_arm_in: 102;
(integer parameter) num_ten_arm_out: 110;
(integer parameter) num_cen_tube: 4;
(integer parameter) num_ext_tube: 5;
(integer parameter) num_other_cylinders: 4;
(number parameter) helix_ang_ten_arm_in: 36;
(number parameter) helix_ang_ten_arm_out: 30;
#parameter relibility of central_tubes, external tubes, tensile armors in/out
(number parameter) relibility_cts_real: 0.9952263349893157;
(number parameter) relibility_cts_required: 0.999;
(number parameter) relibility_ets_real: 0.999;
(number parameter) relibility_ets_required: 0.99;
(number parameter) relibility_tas_in_real: 0.999;
(number parameter) relibility_tas_in_required: 0.99;
(number parameter) relibility_tas_out_real: 0.999;
(number parameter) relibility_tas_out_required: 0.99;

# Basic building elements to form a structure
(child) in_shealth: 
    {
    class, ug_cylinder;
    diameter, dia_in_sh:;
    height, unit_length:;
    Origin, Point(0,0,0);
    Direction, Vector(0,0,1);
    };
#(Child) body_colored_in_shealth:
#    {
#    Class, ug_body; 
#    Feature, {in_shealth:};
#    color, ug_askClosestColor(YELLOW);
#    };
    
(child) hole_is: 
    {
    class, ug_cylinder;
    diameter, dia_in_sh:- 2*thk_in_sh:;
    height, unit_length:;
    Origin, Point(0,0,0);
    Direction, Vector(0,0,1);
    Operation, Subtract;
    Target, {in_shealth:};
    };
    
(child) out_shealth: 
    {
    class, ug_cylinder;
    diameter, dia_out_sh:;
    height, unit_length:;
    Origin, Point(0,0,0);
    Direction, Vector(0,0,1);
    };    
# (Child) body_colored_out_shealth:
#    {
#    Class, ug_body; 
#    Feature, {out_shealth:};
#    color, ug_askClosestColor(YELLOW);
#    };
    
(child) hole_os: 
    {
    class, ug_cylinder;
    diameter, dia_out_sh:- 2*thk_out_sh:;
    height, unit_length:;
    Origin, Point(0,0,0);
    Direction, Vector(0,0,1);
    Operation, Subtract;
    Target, {out_shealth:};
    }; 

(child list) central_tubes: 
    {
    Class, ug_cylinder;
    Origin, nth(child:index:, centerlst_cen_tubes:);
    Diameter, dia_cen_tube:;
    Direction, Vector(0,0,1);
    Height, unit_length:;
    quantity, num_cen_tube:;
    };      
(child list) holes_ct: 
    {
    class, ug_cylinder;
    diameter, dia_cen_tube:- 2*thk_cen_tube:;
    height, unit_length:;
    Origin, nth(child:index:, centerlst_cen_tubes:);
    Direction, Vector(0,0,1);
    Operation, Subtract;
    Target, {nth(child:index:, central_tubes:)};
    quantity, num_cen_tube:;
    };
(list) centerlst_cen_tubes: loop    #for use in (child list) central_tubes: 
{
  for $x in {-dia_cen_tube:/2, dia_cen_tube:/2}; # Coodinates for X hardcoded
  append loop {
    for $y in {-dia_cen_tube:/2, dia_cen_tube:/2}; # Coordinates for Y hardcoded
    for $pt is Point($x,$y,0);
    do printValue($pt);
    append {$pt};
  };
};

(child list) external_tubes: 
    {
    Class, ug_cylinder;
    Origin, nth(child:index:, centerlst_ext_tubes:);
    Diameter, dia_ext_tube:;
    Direction, Vector(0,0,1);
    Height, unit_length:;
    quantity, num_ext_tube:;
    };      
(child list) holes_et: 
    {
    class, ug_cylinder;
    diameter, dia_ext_tube:- 2*thk_ext_tube:;
    height, unit_length:;
    Origin, nth(child:index:, centerlst_ext_tubes:);
    Direction, Vector(0,0,1);
    Operation, Subtract;
    Target, {nth(child:index:, external_tubes:)};
    quantity, num_ext_tube:;
    };

(list) centerlst_ext_tubes:     #for use in (child list) external_tubes: 
{
    Point(20.04,36.22,0),
    Point(-20.04,36.22,0),
    Point(-20.04,-36.22,0),
    Point(20.04,-36.22,0),
    Point(36.22,-20.04,0)
};

(child list) other_cylinders: 
    {
    Class, ug_cylinder;
    Origin, nth(child:index:, centerlst_other_cylinders:);
    Diameter, dia_other_cylinders:;
    Direction, Vector(0,0,1);
    Height, unit_length:;
    quantity, num_other_cylinders:;
    };      

(list) centerlst_other_cylinders:     #for use in (child list) other_cylinders: 
{
    Point(0,dia_cen_tube:/2+sqrt(dia_other_cylinders:*dia_other_cylinders:/4+dia_cen_tube:*dia_other_cylinders:/2),0),
    Point(-dia_cen_tube:/2-sqrt(dia_other_cylinders:*dia_other_cylinders:/4+dia_cen_tube:*dia_other_cylinders:/2),0,0),
    Point(0,-dia_cen_tube:/2-sqrt(dia_other_cylinders:*dia_other_cylinders:/4+dia_cen_tube:*dia_other_cylinders:/2),0),
    Point(dia_cen_tube:/2+sqrt(dia_other_cylinders:*dia_other_cylinders:/4+dia_cen_tube:*dia_other_cylinders:/2),0,0),
};

#-----not consider helix------------
(child list) tensile_armors_in:
    {
    Class, ug_cylinder;
    Origin, Point((dia_in_sh:+dia_ten_arm_io:)/2*cos(360/num_ten_arm_in: * child:index:),(dia_in_sh:+dia_ten_arm_io:)/2*sin(360/num_ten_arm_in: * child:index:),0);
    Diameter, dia_ten_arm_io:;
    Direction, Vector(0,0,1);
    Height, unit_length:;
    quantity, num_ten_arm_in:;
    };
    
(child list) tensile_armors_out:
    {
    Class, ug_cylinder;
    Origin, Point((dia_out_sh:/2-thk_out_sh:-dia_ten_arm_io:/2)*cos(360/num_ten_arm_out: * child:index:),(dia_out_sh:/2-thk_out_sh:-dia_ten_arm_io:/2)*sin(360/num_ten_arm_out: * child:index:),0);
    #Origin, Point(((dia_in_sh:+dia_ten_arm_io:)/2+dia_ten_arm_io:)*cos(360/num_ten_arm_out: * child:index:),((dia_in_sh:+dia_ten_arm_io:)/2+dia_ten_arm_io:)*sin(360/num_ten_arm_out: * child:index:),0);
    Diameter, dia_ten_arm_io:;
    Direction, Vector(0,0,1);
    Height, unit_length:;
    quantity, num_ten_arm_out:;
    };
#-----not consider helix END---------

#-----consider helix------------
#(child list) tensile_armors_in:
#    {
#    Class, helix_curve_zzz;
#    start_point, Point((dia_in_sh:+dia_ten_arm_io:)/2*cos(360/num_ten_arm_in: * child:index:),(dia_in_sh:+dia_ten_arm_io:)/2*sin(360/num_ten_arm_in: * child:index:),0);
#    radius_o, dia_ten_arm_io:/2;
#    pitch, ((dia_in_sh:+dia_ten_arm_io:))*2*3.14/tan(helix_ang_ten_arm_in:);
#    turn, unit_length:/(((dia_in_sh:+dia_ten_arm_io:))*2*3.14/tan(helix_ang_ten_arm_in:));
#    clockwise, 1;
#    quantity, num_ten_arm_in:;
#    };
#
#(child list) tensile_armors_out:
#    {
#    Class, helix_curve_zzz;
#    start_point, Point(((dia_in_sh:+dia_ten_arm_io:)/2+dia_ten_arm_io:)*cos(360/num_ten_arm_out: * child:index:),((dia_in_sh:+dia_ten_arm_io:)/2+dia_ten_arm_io:)*sin(360/num_ten_arm_out: * child:index:),0);
#    radius_o, dia_ten_arm_io:/2;
#    pitch, ((dia_in_sh:+dia_ten_arm_io:)/2+dia_ten_arm_io:)*2*3.14/tan(helix_ang_ten_arm_out:);
#    turn, unit_length:/(((dia_in_sh:+dia_ten_arm_io:)/2+dia_ten_arm_io:)*2*3.14/tan(helix_ang_ten_arm_out:));
#    clockwise, -1;
#    quantity, num_ten_arm_out:;
#    };
#-----consider helix END------------
#filler
(Child) filler_0: 
{ 
    Class, ug_cylinder; 
    Diameter, 12;
    Direction, Vector(0,0,1);
    Height, unit_length:;
};
(Child) spline1:
{
  Class, ug_spline_cntl;
  Points, {{point(32,13,0)},{point(48,12,0)},{point(42,26,0)},{point(32,39,0)},{point(25,28,0)}}
};
(Child) line1:
{
 Class, ug_line; 
 Start_Point, Point(32,13,0); 
 End_Point, point(25,28,0); 
};
(Child) filler_extrude1: 
{ 
  Class, ug_extruded; 
  Start_Limit, 0; 
  End_Limit, unit_length:; 
  Direction, Vector(0,0,1); 
  profile, {spline1:,line1:};
};
(Child) spline2:
{
  Class, ug_spline_cntl;
  Points, {{point(-32,13,0)},{point(-48,12,0)},{point(-42,26,0)},{point(-32,39,0)},{point(-25,28,0)}}
};
(Child) line2:
{
 Class, ug_line; 
 Start_Point, Point(-32,13,0); 
 End_Point, point(-25,28,0); 
};
(Child) filler_extrude2: 
{ 
  Class, ug_extruded; 
  Start_Limit, 0; 
  End_Limit, unit_length:; 
  Direction, Vector(0,0,1); 
  profile, {spline2:,line2:};
};
(Child) spline3:
{
  Class, ug_spline_cntl;
  Points, {{point(-32,-13,0)},{point(-48,-12,0)},{point(-42,-26,0)},{point(-32,-39,0)},{point(-25,-28,0)}}
};
(Child) line3:
{
 Class, ug_line; 
 Start_Point, Point(-32,-13,0); 
 End_Point, point(-25,-28,0); 
};
(Child) filler_extrude3: 
{ 
  Class, ug_extruded; 
  Start_Limit, 0; 
  End_Limit, unit_length:; 
  Direction, Vector(0,0,1); 
  profile, {spline3:,line3:};
};
(Child) spline4:
{
  Class, ug_spline_cntl;
  Points, {{point(27,-24,0)},{point(43,-35,0)},{point(32,-39,0)},{point(24,-27,0)}}
};
(Child) line4:
{
 Class, ug_line; 
 Start_Point, Point(27,-24,0); 
 End_Point, point(24,-27,0); 
};
(Child) filler_extrude4: 
{ 
  Class, ug_extruded; 
  Start_Limit, 0; 
  End_Limit, unit_length:; 
  Direction, Vector(0,0,1); 
  profile, {spline4:,line4:};
};
  
#color depending on reliability  
 (Child list) body_colored_central_tubes:
    {
    Class, ug_body; 
    Feature, {nth(child:index:, central_tubes:)};
    quantity, num_cen_tube:;
    color,  if (relibility_cts_real: < relibility_cts_required:) then ug_askClosestColor(RED) 
            else if(relibility_cts_real: > relibility_cts_required:) then ug_askClosestColor(GREEN)
            else ug_askClosestColor(YELLOW); 
    };
    
(Child list) body_colored_external_tubes:
    {
    Class, ug_body; 
    Feature, {nth(child:index:, external_tubes:)};
    quantity, num_ext_tube:;
   color,  if (relibility_ets_real: < relibility_ets_required:) then ug_askClosestColor(RED) 
           else if(relibility_ets_real: > relibility_ets_required:) then ug_askClosestColor(GREEN)
           else ug_askClosestColor(YELLOW); 
    };
   
(Child list) body_colored_tensile_armors_in:
    {
    Class, ug_body; 
    Feature, {nth(child:index:, tensile_armors_in:)};
    quantity, num_ten_arm_in:;
   color,  if (relibility_tas_in_real: < relibility_tas_in_required:) then ug_askClosestColor(RED) 
           else if(relibility_tas_in_real: > relibility_tas_in_required:) then ug_askClosestColor(GREEN)
           else ug_askClosestColor(YELLOW); 
    };
   
(Child list) body_colored_tensile_armors_out:
    {
    Class, ug_body; 
    Feature, {nth(child:index:, tensile_armors_out:)};
    quantity, num_ten_arm_out:;
   color,  if (relibility_tas_out_real: < relibility_tas_out_required:) then ug_askClosestColor(RED) 
           else if(relibility_tas_out_real: > relibility_tas_out_required:) then ug_askClosestColor(GREEN)
           else ug_askClosestColor(YELLOW); 
    };
